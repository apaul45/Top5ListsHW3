[{"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/index.js":"1","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/reportWebVitals.js":"2","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/App.js":"3","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/store/index.js":"4","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/index.js":"5","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/transactions/MoveItem_Transaction.js":"6","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/common/jsTPS.js":"7","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/api/index.js":"8","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/Banner.js":"9","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/DeleteModal.js":"10","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/EditToolbar.js":"11","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/ListCard.js":"12","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/ListSelector.js":"13","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/Statusbar.js":"14","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/Top5Item.js":"15","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/Workspace.js":"16","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/transactions/ChangeItemTransaction.js":"17"},{"size":879,"mtime":1633644871358,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1633644871359,"results":"20","hashOfConfig":"19"},{"size":657,"mtime":1634192500788,"results":"21","hashOfConfig":"19"},{"size":20214,"mtime":1634604912326,"results":"22","hashOfConfig":"19"},{"size":521,"mtime":1633644871357,"results":"23","hashOfConfig":"19"},{"size":703,"mtime":1634066943242,"results":"24","hashOfConfig":"19"},{"size":6473,"mtime":1633644871352,"results":"25","hashOfConfig":"19"},{"size":1508,"mtime":1633915937008,"results":"26","hashOfConfig":"19"},{"size":446,"mtime":1633644871352,"results":"27","hashOfConfig":"19"},{"size":1651,"mtime":1633900096395,"results":"28","hashOfConfig":"19"},{"size":1729,"mtime":1634162265921,"results":"29","hashOfConfig":"19"},{"size":3542,"mtime":1634606124998,"results":"30","hashOfConfig":"19"},{"size":2094,"mtime":1634526802712,"results":"31","hashOfConfig":"19"},{"size":462,"mtime":1633644871356,"results":"32","hashOfConfig":"19"},{"size":3658,"mtime":1634605886319,"results":"33","hashOfConfig":"19"},{"size":1482,"mtime":1633644871357,"results":"34","hashOfConfig":"19"},{"size":743,"mtime":1634066941583,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"401p9y",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/index.js",[],["73","74"],"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/reportWebVitals.js",[],"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/App.js",[],"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/store/index.js",["75","76","77"],"import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nimport ChangeItemTransaction from '../transactions/ChangeItemTransaction'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    SET_DELETE_LIST: \"SET_DELETE_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    SET_ITEM_ACTIVE: \"SET_ITEM_ACTIVE\",\n    ENABLE_DISABLE_BLUR: \"ENABLE_DISABLE_BLUR\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        isItemEditActive: false,\n        listMarkedForDeletion: null,\n        listCreated: false,\n        hasUndo: tps.hasTransactionToUndo(), \n        hasRedo: tps.hasTransactionToRedo(),\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        let { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    listCreated: false,\n                    hasUndo: tps.hasTransactionToUndo(), \n                    hasRedo: tps.hasTransactionToRedo(),\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    listCreated: false,\n                    hasUndo: tps.hasTransactionToUndo(), \n                    hasRedo: tps.hasTransactionToRedo(),\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                //For deleting a list: if the deleted list wasn't also the \n                //current list, then make sure to not set currentList to null \n                let isCurrent = null;\n                if (typeof payload.isCurrent !== 'undefined'){\n                    //If the current list is the one that is being deleted, then leave isCurrent as null\n                    //If not (isCurrent is false), then leave store.currentList as is\n                    if (!payload.isCurrent){\n                        isCurrent = store.currentList;\n                    }\n                    //If .isCurrent exists, that means deleteMarkedList \n                    //called this type. So payload has to be set to .pairs to setStore\n                    payload = payload.pairs;\n                }\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: isCurrent,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: store.isListNameEditActive,\n                    isItemEditActive: store.isItemEditActive,\n                    listMarkedForDeletion: null,\n                    listCreated: false,\n                    hasUndo: tps.hasTransactionToUndo(), \n                    hasRedo: tps.hasTransactionToRedo(),\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                // //Since item renaming uses this reducer, \n                // //check if the payload is an array or not\n                // if (Array.isArray(payload)){\n                //     return setStore({\n                //         idNamePairs: store.idNamePairs,\n                //         currentList: payload,\n                //         newListCounter: store.newListCounter,\n                //         isListNameEditActive: false,\n                //         isItemEditActive: false,\n                //         listMarkedForDeletion: null,\n                //         listCreated: false,\n                //         hasUndo: tps.hasTransactionToUndo(), \n                //         hasRedo: tps.hasTransactionToRedo(),\n                //     });\n                // }\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    listCreated: false,\n                    hasUndo: tps.hasTransactionToUndo(), \n                    hasRedo: tps.hasTransactionToRedo(),\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    listCreated: false,\n                    hasUndo: tps.hasTransactionToUndo(), \n                    hasRedo: tps.hasTransactionToRedo(),\n                });\n            }\n            //If a user clicked on a item, set itemEditActive to true\n            case GlobalStoreActionType.SET_ITEM_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    listCreated: false,\n                    hasUndo: tps.hasTransactionToUndo(), \n                    hasRedo: tps.hasTransactionToRedo(),\n                });\n            }\n            case GlobalStoreActionType.SET_DELETE_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listMarkedForDeletion: payload,\n                    isItemEditActive: store.isItemEditActive,\n                    isListNameEditActive: store.isListNameEditActive,\n                    listCreated: false,\n                    hasUndo: tps.hasTransactionToUndo(), \n                    hasRedo: tps.hasTransactionToRedo(),\n                });\n            }\n            //If a new list is created, make sure to update the new list counter\n            //to reflect this, along with the keyname pairs, currentList references, and \n            //listCreated boolean (so that this new list can be in edit mode right away)\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    currentList: payload.currList,\n                    newListCounter: store.newListCounter+1,\n                    idNamePairs: payload.pairs,\n                    isListNameEditActive: false,\n                    isItemEditActive: /*true*/false,\n                    listMarkedForDeletion: null,\n                    listCreated: true,\n                    hasUndo: tps.hasTransactionToUndo(), \n                    hasRedo: tps.hasTransactionToRedo(),\n                });\n            }\n            // case GlobalStoreActionType.ENABLE_DISABLE_BLUR: {\n            //     return setStore({\n            //         currentList: store.currList,\n            //         newListCounter: store.newListCounter,\n            //         idNamePairs: store.idNamePairs,\n            //         isListNameEditActive: store.isListNameEditActive,\n            //         isItemEditActive: store.isItemEditActive,\n            //         listMarkedForDeletion: store.listMarkedForDeletion,\n            //         listCreated: store.listCreated,\n            //         hasUndo: tps.hasTransactionToUndo(), \n            //         hasRedo: tps.hasTransactionToRedo() ,\n            //         isBlur: payload\n            //     });\n            // }\n            //Update the name of the current delete modal, so tht it shows in the modal\n            default:\n                return store;\n        }\n    }\n    store.createNewList = function() {\n        async function asyncCreateNewList() {\n            //Create and add a new list to the database with payload being the current list counter\n            let name = \"Untitled \" + store.newListCounter;\n            let pair = [\"?\", \"?\", \"?\", \"?\", \"?\"];\n            //Send in a object with name, and pair as a payload\n            let response = await api.createTop5List({name: name, items: pair});\n            if (response.data.success){\n                    let top5List = response.data.top5List;\n                    response = await api.getTop5ListPairs();\n                        if (response.data.success){\n                            let pairs = response.data.idNamePairs;\n                            storeReducer({\n                                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                                payload: {currList : top5List, pairs: pairs}\n                            });\n                            store.history.push(\"/top5list/\" + top5List._id);\n                        }\n            }\n        }\n        asyncCreateNewList();\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: top5List\n                    });\n                    store.history.push(\"/top5list/\" + top5List._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                top5List.name = newName;\n                async function updateList(top5List) {\n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                    if (response.data.success) {\n                        async function getListPairs(top5List) {\n                            response = await api.getTop5ListPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        top5List: top5List\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(top5List);\n                    }\n                }\n                updateList(top5List);\n            }\n        }\n        asyncChangeListName(id);\n    }\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        //Make sure to clear the transaction stack upon a close\n        tps.clearAllTransactions();\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getTop5ListPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n    //This function updates the list marked for deletion, so that the name of it\n    //can be shown in the delete modal before possibly being deleted\n    store.setDeleteList = function (id) {\n        async function asyncSetDeleteList(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                //If the right list is able to be retrieved from the db, then call storeReducer w \n                //the list as the payload\n                storeReducer({\n                    type: GlobalStoreActionType.SET_DELETE_LIST,\n                    payload: top5List\n                });\n            }\n        }\n        asyncSetDeleteList(id);\n    }\n    store.hideDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n    store.showDeleteModal = function(){\n        let modal = document.getElementById(\"delete-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    store.deleteMarkedList = function() {\n        async function asyncDeleteMarkedList(){\n            //If the marked delete list is equal to the current list, make sure to close \n            //the UI after deleting this list\n            let isEqual = false;\n            if (store.listMarkedForDeletion && store.currentList){\n                isEqual = store.listMarkedForDeletion._id === store.currentList._id;\n            }\n            const response = await api.deleteTop5ListById(store.listMarkedForDeletion._id).then(\n                (response) => {store.deleteMarkedList2(isEqual)},()=>store.deleteMarkedList2(isEqual));\n        }\n        asyncDeleteMarkedList();\n    }\n    store.deleteMarkedList2 = function(isEqual){\n        async function asyncDeleteMarkedList2(){\n            let response = await api.getTop5ListPairs(). then((response) => {\n                store.hideDeleteListModal();\n                let newPairs = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: {pairs: newPairs, isCurrent: isEqual}\n                });\n            }).catch(()=>{\n                store.hideDeleteListModal();\n                let newPairs = store.idNamePairs.filter((pair) => pair._id !== store.listMarkedForDeletion._id);\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: {pairs: newPairs, isCurrent: isEqual}\n                })});\n        }\n        asyncDeleteMarkedList2();\n    }\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    store.updateCurrentList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n    store.setItemActive = function() {\n        storeReducer({\n            type: GlobalStoreActionType.SET_ITEM_ACTIVE,\n            payload: store.currentList\n        })\n    }\n    store.addChangeItemTransaction = function(id, newName){\n        let oldText = store.currentList.items[id-1];\n        //If the item name is the same, don't add a transaction to the stack\n        if (oldText === newName){\n            store.changeItemName(id, newName);\n        }\n        else{\n            let transaction = new ChangeItemTransaction(store, id, oldText, newName);\n            tps.addTransaction(transaction);\n        }\n    }\n    store.changeItemName = async function(id, newName) {\n        store.currentList.items[id-1] = newName;\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success){\n            //Make sure to update \n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n    // store.enableDisableBlur = function(newBool){\n    //     //Update the value of the blur flag, to be used in \n    //     //onClick handlers of undo, redo, or close\n    //     storeReducer({\n    //         type: GlobalStoreActionType.ENABLE_DISABLE_BLUR,\n    //         payload: newBool\n    //     })\n    // }\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/index.js",[],"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/transactions/MoveItem_Transaction.js",[],"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/common/jsTPS.js",[],"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/api/index.js",[],"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/Banner.js",[],"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/DeleteModal.js",[],"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/EditToolbar.js",[],"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/ListCard.js",[],"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/ListSelector.js",["78"],"import React, { useContext, useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport ListCard from './ListCard.js'\nimport { GlobalStoreContext } from '../store'\nimport DeleteModal from './DeleteModal'\n/*\n    This React component lists all the top5 lists in the UI.\n    \n    @author McKilla Gorilla\n*/\nconst ListSelector = () => {\n    //useContext to use globally defined variables\n    const { store } = useContext(GlobalStoreContext);\n    //useHistory to allow for navigating between pages\n    store.history = useHistory();\n    //Use the useEffect hook to update the home screen - load in all lists\n    useEffect(() => {\n        store.loadIdNamePairs();\n    }, []);\n    let listCard = \"\";\n    if (store) {\n        //if store isn't null, create a ListCard element for each list\n        //the variable listCard then will contain all these ListCards to be rendered below\n        listCard = store.idNamePairs.map((pair) => (\n            store.currentList? \n            store.currentList._id === pair._id?\n            <ListCard\n                key={pair._id}\n                idNamePair={pair}\n                selected={true}\n                editActive={false}\n            /> :\n            <ListCard\n            key={pair._id}\n            idNamePair={pair}\n            selected={false}\n            editActive={false}\n            /> :\n            <ListCard\n            key={pair._id}\n            idNamePair={pair}\n            selected={false}\n            editActive={false}\n             /> \n        ))\n    }\n    return (\n        <div id=\"top5-list-selector\">\n            <div id=\"list-selector-heading\">\n                <input\n                    type=\"button\"\n                    id=\"add-list-button\"\n                    className=\"top5-button\"\n                    value=\"+\" \n                    onClick={store.createNewList}/>\n                Your Lists\n            </div>\n            <div id=\"list-selector-list\">\n                {\n                    listCard\n                }\n                <DeleteModal />\n            </div>\n        </div>)\n}\n\nexport default ListSelector;","/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/Statusbar.js",[],"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/Top5Item.js",["79"],"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/Workspace.js",[],"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/transactions/ChangeItemTransaction.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":346,"column":19,"nodeType":"86","messageId":"87","endLine":346,"endColumn":27},{"ruleId":"84","severity":1,"message":"85","line":353,"column":17,"nodeType":"86","messageId":"87","endLine":353,"endColumn":25},{"ruleId":"88","severity":1,"message":"89","line":353,"column":34,"nodeType":"90","messageId":"91","endLine":353,"endColumn":62,"fix":"92"},{"ruleId":"93","severity":1,"message":"94","line":19,"column":8,"nodeType":"95","endLine":19,"endColumn":10,"suggestions":"96"},{"ruleId":"84","severity":1,"message":"97","line":14,"column":11,"nodeType":"86","messageId":"87","endLine":14,"endColumn":15},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","no-whitespace-before-property","Unexpected whitespace before property then.","MemberExpression","unexpectedWhitespace",{"range":"100","text":"101"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'store'. Either include it or remove the dependency array.","ArrayExpression",["102"],"'text' is assigned a value but never used.","no-global-assign","no-unsafe-negation",[15963,15965],".",{"desc":"103","fix":"104"},"Update the dependencies array to be: [store]",{"range":"105","text":"106"},[682,684],"[store]"]