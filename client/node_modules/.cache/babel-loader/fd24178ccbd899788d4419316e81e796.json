{"ast":null,"code":"var _jsxFileName = \"/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/Top5Item.js\",\n    _s = $RefreshSig$();\n\nimport { React, useContext, useState } from \"react\";\nimport { GlobalStoreContext } from '../store';\n/*\n    This React component represents a single item in our\n    Top 5 List, which can be edited or moved around.\n    \n    @author McKilla Gorilla\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Top5Item(props) {\n  _s();\n\n  const {\n    store\n  } = useContext(GlobalStoreContext);\n  const [draggedTo, setDraggedTo] = useState(0); //Like ListCard, have a sttae variable called editActive with its own setter\n\n  const [editActive, setEditActive] = useState(false);\n  const [text, setText] = useState(\"\");\n\n  function handleDragStart(event) {\n    event.dataTransfer.setData(\"item\", event.target.id);\n  }\n\n  function handleDragOver(event) {\n    event.preventDefault();\n  }\n\n  function handleDragEnter(event) {\n    event.preventDefault();\n    setDraggedTo(true);\n  }\n\n  function handleDragLeave(event) {\n    event.preventDefault();\n    setDraggedTo(false);\n  }\n\n  function handleDrop(event) {\n    event.preventDefault();\n    let target = event.target;\n    let targetId = target.id;\n    targetId = targetId.substring(target.id.indexOf(\"-\") + 1);\n    let sourceId = event.dataTransfer.getData(\"item\");\n    sourceId = sourceId.substring(sourceId.indexOf(\"-\") + 1);\n    setDraggedTo(false); // UPDATE THE LIST\n\n    store.addMoveItemTransaction(sourceId, targetId);\n  }\n\n  function handleToggleEdit(event) {\n    event.stopPropagation();\n    toggleEdit();\n  }\n\n  function toggleEdit() {\n    let newActive = !editActive;\n\n    if (newActive) {\n      store.setItemActive();\n    }\n\n    setEditActive(newActive);\n  }\n\n  function handleKeyPress(event) {\n    if (event.code === \"Enter\") {\n      store.addChangeItemTransaction(index + 1, text);\n      toggleEdit();\n    }\n  } // function handleBlur(event){\n  //     //If handleKeyPress called onBlur, don't enable blur as a way of disabling all the\n  //     //toolbar buttons\n  //     if (event.code === \"Enter\"){\n  //         store.addChangeItemTransaction(index+1, text);\n  //     }\n  //     else{\n  //         //If user tries to press on any of the buttons when editing an item, \n  //         //make sure that the buttons don;t do anything with the use of a blur flag\n  //         store.enableDisableBlur(true);\n  //         store.addChangeItemTransaction(index+1, text);\n  //     }\n  //     toggleEdit();\n  // } \n\n\n  function handleUpdateText(event) {\n    setText(event.target.value);\n  }\n\n  let {\n    index\n  } = props;\n  let itemClass = \"top5-item\";\n\n  if (draggedTo) {\n    itemClass = \"top5-item-dragged-to\";\n  }\n\n  let item = /*#__PURE__*/_jsxDEV(\"div\", {\n    id: 'item-' + (index + 1),\n    className: itemClass,\n    onDragStart: handleDragStart,\n    onDragOver: handleDragOver,\n    onDragEnter: handleDragEnter,\n    onDragLeave: handleDragLeave,\n    onDrop: handleDrop,\n    draggable: \"true\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      id: \"edit-item-\" + index + 1,\n      className: \"list-card-button\",\n      value: \"\\u270E\",\n      onClick: handleToggleEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), props.text]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n\n  if (editActive) {\n    item = /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"item-\" + index + 1,\n      className: \"top5-item\",\n      type: \"text\",\n      onKeyPress: handleKeyPress,\n      defaultValue: props.text,\n      onChange: handleUpdateText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  }\n\n  return item;\n}\n\n_s(Top5Item, \"YhrOSkSpOc6Dwwm/wJU5AXVf0IM=\");\n\n_c = Top5Item;\nexport default Top5Item;\n\nvar _c;\n\n$RefreshReg$(_c, \"Top5Item\");","map":{"version":3,"sources":["/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/components/Top5Item.js"],"names":["React","useContext","useState","GlobalStoreContext","Top5Item","props","store","draggedTo","setDraggedTo","editActive","setEditActive","text","setText","handleDragStart","event","dataTransfer","setData","target","id","handleDragOver","preventDefault","handleDragEnter","handleDragLeave","handleDrop","targetId","substring","indexOf","sourceId","getData","addMoveItemTransaction","handleToggleEdit","stopPropagation","toggleEdit","newActive","setItemActive","handleKeyPress","code","addChangeItemTransaction","index","handleUpdateText","value","itemClass","item"],"mappings":"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","sourcesContent":["import { React, useContext, useState, } from \"react\";\nimport { GlobalStoreContext } from '../store'\n/*\n    This React component represents a single item in our\n    Top 5 List, which can be edited or moved around.\n    \n    @author McKilla Gorilla\n*/\nfunction Top5Item(props) {\n    const { store } = useContext(GlobalStoreContext);\n    const [draggedTo, setDraggedTo] = useState(0);\n    //Like ListCard, have a sttae variable called editActive with its own setter\n    const [editActive, setEditActive] = useState(false);\n    const [text, setText] = useState(\"\");\n    function handleDragStart(event) {\n        event.dataTransfer.setData(\"item\", event.target.id);\n    }\n\n    function handleDragOver(event) {\n        event.preventDefault();\n    }\n\n    function handleDragEnter(event) {\n        event.preventDefault();\n        setDraggedTo(true);\n    }\n\n    function handleDragLeave(event) {\n        event.preventDefault();\n        setDraggedTo(false);\n    }\n\n    function handleDrop(event) {\n        event.preventDefault();\n        let target = event.target;\n        let targetId = target.id;\n        targetId = targetId.substring(target.id.indexOf(\"-\") + 1);\n        let sourceId = event.dataTransfer.getData(\"item\");\n        sourceId = sourceId.substring(sourceId.indexOf(\"-\") + 1);\n        setDraggedTo(false);\n\n        // UPDATE THE LIST\n        store.addMoveItemTransaction(sourceId, targetId);\n    }\n    function handleToggleEdit(event){\n        event.stopPropagation();\n        toggleEdit();\n    }\n    function toggleEdit(){\n        let newActive = !editActive;\n        if (newActive) {\n            store.setItemActive();\n        }\n        setEditActive(newActive);\n    }\n    function handleKeyPress(event){\n        if (event.code === \"Enter\") {\n            store.addChangeItemTransaction(index+1, text);\n            toggleEdit();\n        }\n    }\n    // function handleBlur(event){\n    //     //If handleKeyPress called onBlur, don't enable blur as a way of disabling all the\n    //     //toolbar buttons\n    //     if (event.code === \"Enter\"){\n    //         store.addChangeItemTransaction(index+1, text);\n    //     }\n    //     else{\n    //         //If user tries to press on any of the buttons when editing an item, \n    //         //make sure that the buttons don;t do anything with the use of a blur flag\n    //         store.enableDisableBlur(true);\n    //         store.addChangeItemTransaction(index+1, text);\n    //     }\n    //     toggleEdit();\n    // } \n    function handleUpdateText(event){\n        setText(event.target.value);\n    }\n    let { index } = props;\n    let itemClass = \"top5-item\";\n    if (draggedTo) {\n        itemClass = \"top5-item-dragged-to\";\n    }\n    let item = \n        <div\n            id={'item-' + (index + 1)}\n            className={itemClass}\n            onDragStart={handleDragStart}\n            onDragOver={handleDragOver}\n            onDragEnter={handleDragEnter}\n            onDragLeave={handleDragLeave}\n            onDrop={handleDrop}\n            draggable=\"true\"\n        >\n            <input\n                type=\"button\"\n                id={\"edit-item-\" + index + 1}\n                className=\"list-card-button\"\n                value={\"\\u270E\"}\n                onClick={handleToggleEdit}\n            />\n            {props.text}\n        </div>;\n    if (editActive){\n        item = \n            <input\n                id={\"item-\" + index + 1}\n                className='top5-item'\n                type='text'\n                onKeyPress={handleKeyPress}\n                defaultValue={props.text}\n                onChange={handleUpdateText}\n        />\n    }\n    return (\n        item\n    );\n}\n\nexport default Top5Item;"]},"metadata":{},"sourceType":"module"}