{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  SET_DELETE_LIST: \"SET_DELETE_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    let {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          //For deleting a list: if the deleted list wasn't also the \n          //current list, then make sure to not set currentList to null \n          let isCurrent = null;\n\n          if (typeof payload.isCurrent !== 'undefined') {\n            isCurrent = store.currentList; //If .isCurrent exists, that means deleteMarkedList \n            //called this type. So payload has to be set to .pairs to setStore\n\n            payload = payload.pairs;\n          }\n\n          return setStore({\n            idNamePairs: payload,\n            currentList: isCurrent,\n            listMarkedForDeletion: null,\n            isListNameEditActive: store.isListNameEditActive,\n            isItemEditActive: store.isItemEditActive,\n            listMarkedForDeletion: store.listMarkedForDeletion\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      case GlobalStoreActionType.SET_DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listMarkedForDeletion: payload,\n            isItemEditActive: store.isItemEditActive,\n            isListNameEditActive: store.isListNameEditActive\n          });\n        }\n      //If a new list is created, make sure to update the new list counter\n      //to reflect this, along with the keyname pairs and currentList references\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            currentList: store.currentList,\n            newListCounter: store.newListCounter + 1,\n            idNamePairs: payload.pairs,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      //Update the name of the current delete modal, so tht it shows in the modal\n\n      default:\n        return store;\n    }\n  };\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      //Create a and add a new list to the database with payload being the current list counter\n      let name = \"Untitled \" + store.newListCounter;\n      let pair = [\"?\", \"?\", \"?\", \"?\", \"?\"]; //Send in a object with id, name, and pair as a payload\n\n      let response = await api.createTop5List({\n        name: name,\n        items: pair\n      });\n\n      if (response.data.success) {\n        // //Get the newly created list to be used to set as the current/selected list\n        // let response = await api.getTop5ListById(id);\n        // if (response.data.success){\n        //     let top5List = response.data.top5List;\n        //     let response = await api.updateTop5ListById(top5List._id, top5List);\n        //     if (response.data.success){\n        //         store.history.push(\"/top5list/\" + top5List._id);\n        //         //Get the updated lists in the database to set as the new idNamePair for the store\n        let response = await api.getTop5ListPairs();\n\n        if (response.data.success) {\n          let pairs = response.data.idNamePairs;\n          storeReducer({\n            type: GlobalStoreActionType.CREATE_NEW_LIST,\n            payload: {\n              pairs: pairs\n            }\n          });\n        }\n      }\n    }\n\n    asyncCreateNewList();\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; //This function updates the list marked for deletion, so that the name of it\n  //can be shown in the delete modal before possibly being deleted\n\n\n  store.setDeleteList = function (id) {\n    async function asyncSetDeleteList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List; //If the right list is able to be retrieved from the db, then call storeReducer w \n        //the list as the payload\n\n        storeReducer({\n          type: GlobalStoreActionType.SET_DELETE_LIST,\n          payload: top5List\n        });\n      }\n    }\n\n    asyncSetDeleteList(id);\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.showDeleteModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.deleteMarkedList = function () {\n    async function asyncDeleteMarkedList() {\n      //If the marked delete list is equal to the current list, make sure to close \n      //the UI after deleting this list\n      let isEqual = false;\n\n      if (store.listMarkedForDeletion && store.currentList) {\n        isEqual = store.listMarkedForDeletion._id === store.currentList._id;\n      }\n\n      const response = await api.deleteTop5ListById(store.listMarkedForDeletion._id);\n\n      if (response.data.success) {\n        //Make sure the delete  modal is dismissed\n        store.hideDeleteListModal();\n        const response2 = await api.getTop5ListPairs();\n\n        if (response2.data.success) {\n          let newPairs = response2.data.idNamePairs;\n          storeReducer({\n            type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n            payload: {\n              pairs: newPairs,\n              isCurrent: isEqual\n            }\n          });\n        }\n      }\n    }\n\n    asyncDeleteMarkedList();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"3FRAmbSo6sFbcN0StEjON5Xn67M=\");","map":{"version":3,"sources":["/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","SET_DELETE_LIST","CREATE_NEW_LIST","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","isCurrent","pairs","createNewList","asyncCreateNewList","name","pair","response","createTop5List","items","data","success","getTop5ListPairs","setCurrentList","id","asyncSetCurrentList","getTop5ListById","updateTop5ListById","_id","history","push","changeListName","newName","asyncChangeListName","updateList","getListPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setDeleteList","asyncSetDeleteList","hideDeleteListModal","modal","document","getElementById","classList","remove","showDeleteModal","add","deleteMarkedList","asyncDeleteMarkedList","isEqual","deleteTop5ListById","response2","newPairs","addMoveItemTransaction","start","end","transaction","addTransaction","moveItem","temp","i","updateCurrentList","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    SET_DELETE_LIST: \"SET_DELETE_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        let { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                //For deleting a list: if the deleted list wasn't also the \n                //current list, then make sure to not set currentList to null \n                let isCurrent = null;\n                if (typeof payload.isCurrent !== 'undefined'){\n                    isCurrent = store.currentList;\n                    //If .isCurrent exists, that means deleteMarkedList \n                    //called this type. So payload has to be set to .pairs to setStore\n                    payload = payload.pairs;\n                }\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: isCurrent,\n                    listMarkedForDeletion: null,\n                    isListNameEditActive: store.isListNameEditActive,\n                    isItemEditActive: store.isItemEditActive,\n                    listMarkedForDeletion: store.listMarkedForDeletion\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            case GlobalStoreActionType.SET_DELETE_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listMarkedForDeletion: payload,\n                    isItemEditActive: store.isItemEditActive,\n                    isListNameEditActive: store.isListNameEditActive\n                });\n            }\n            //If a new list is created, make sure to update the new list counter\n            //to reflect this, along with the keyname pairs and currentList references\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter+1,\n                    idNamePairs: payload.pairs,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            //Update the name of the current delete modal, so tht it shows in the modal\n            default:\n                return store;\n        }\n    }\n    store.createNewList = function() {\n        async function asyncCreateNewList() {\n            //Create a and add a new list to the database with payload being the current list counter\n            let name = \"Untitled \" + store.newListCounter;\n            let pair = [\"?\", \"?\", \"?\", \"?\", \"?\"];\n            //Send in a object with id, name, and pair as a payload\n            let response = await api.createTop5List({name: name, items: pair});\n            if (response.data.success){\n                // //Get the newly created list to be used to set as the current/selected list\n                // let response = await api.getTop5ListById(id);\n                // if (response.data.success){\n                //     let top5List = response.data.top5List;\n                //     let response = await api.updateTop5ListById(top5List._id, top5List);\n                //     if (response.data.success){\n                //         store.history.push(\"/top5list/\" + top5List._id);\n                //         //Get the updated lists in the database to set as the new idNamePair for the store\n                        let response = await api.getTop5ListPairs();\n                        if (response.data.success){\n                            let pairs = response.data.idNamePairs;\n                            storeReducer({\n                                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                                payload: {pairs: pairs}\n                            });\n                        }\n                    }\n                }\n                asyncCreateNewList();\n            }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: top5List\n                    });\n                    store.history.push(\"/top5list/\" + top5List._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                top5List.name = newName;\n                async function updateList(top5List) {\n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                    if (response.data.success) {\n                        async function getListPairs(top5List) {\n                            response = await api.getTop5ListPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        top5List: top5List\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(top5List);\n                    }\n                }\n                updateList(top5List);\n            }\n        }\n        asyncChangeListName(id);\n    }\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getTop5ListPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n    //This function updates the list marked for deletion, so that the name of it\n    //can be shown in the delete modal before possibly being deleted\n    store.setDeleteList = function (id) {\n        async function asyncSetDeleteList(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                //If the right list is able to be retrieved from the db, then call storeReducer w \n                //the list as the payload\n                storeReducer({\n                    type: GlobalStoreActionType.SET_DELETE_LIST,\n                    payload: top5List\n                });\n            }\n        }\n        asyncSetDeleteList(id);\n    }\n    store.hideDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n    store.showDeleteModal = function(){\n        let modal = document.getElementById(\"delete-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    store.deleteMarkedList = function() {\n        async function asyncDeleteMarkedList(){\n            //If the marked delete list is equal to the current list, make sure to close \n            //the UI after deleting this list\n            let isEqual = false;\n            if (store.listMarkedForDeletion && store.currentList){\n                isEqual = store.listMarkedForDeletion._id === store.currentList._id;\n            }\n            const response = await api.deleteTop5ListById(store.listMarkedForDeletion._id);\n            if (response.data.success){\n                //Make sure the delete  modal is dismissed\n                store.hideDeleteListModal();\n                const response2 = await api.getTop5ListPairs();\n                if (response2.data.success){\n                    let newPairs = response2.data.idNamePairs;\n                    storeReducer({\n                        type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                        payload: {pairs: newPairs, isCurrent: isEqual}\n                    });\n                } \n            }\n        }\n        asyncDeleteMarkedList();\n    }\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    store.updateCurrentList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"]},"metadata":{},"sourceType":"module"}