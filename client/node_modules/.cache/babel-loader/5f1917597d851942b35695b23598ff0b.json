{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport ChangeItemTransaction from '../transactions/ChangeItemTransaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  SET_DELETE_LIST: \"SET_DELETE_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  SET_ITEM_ACTIVE: \"SET_ITEM_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null,\n    listCreated: false\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    let {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            listCreated: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            listCreated: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          //For deleting a list: if the deleted list wasn't also the \n          //current list, then make sure to not set currentList to null \n          let isCurrent = null;\n\n          if (typeof payload.isCurrent !== 'undefined') {\n            isCurrent = store.currentList; //If .isCurrent exists, that means deleteMarkedList \n            //called this type. So payload has to be set to .pairs to setStore\n\n            payload = payload.pairs;\n          }\n\n          return setStore({\n            idNamePairs: payload,\n            currentList: isCurrent,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: store.isListNameEditActive,\n            isItemEditActive: store.isItemEditActive,\n            listMarkedForDeletion: store.listMarkedForDeletion,\n            listCreated: false\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            listCreated: false\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            listCreated: false\n          });\n        }\n      //If a user clicked on a item, set itemEditActive to true\n\n      case GlobalStoreActionType.SET_ITEM_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: true,\n            listMarkedForDeletion: null,\n            listCreated: false\n          });\n        }\n\n      case GlobalStoreActionType.SET_DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listMarkedForDeletion: payload,\n            isItemEditActive: store.isItemEditActive,\n            isListNameEditActive: store.isListNameEditActive,\n            listCreated: false\n          });\n        }\n      //If a new list is created, make sure to update the new list counter\n      //to reflect this, along with the keyname pairs, currentList references, and \n      //listCreated boolean (so that this new list can be in edit mode right away)\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            currentList: payload.currList,\n            newListCounter: store.newListCounter + 1,\n            idNamePairs: payload.pairs,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null,\n            listCreated: true\n          });\n        }\n      //Update the name of the current delete modal, so tht it shows in the modal\n\n      default:\n        return store;\n    }\n  };\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      //Create and add a new list to the database with payload being the current list counter\n      let name = \"Untitled \" + store.newListCounter;\n      let pair = [\"?\", \"?\", \"?\", \"?\", \"?\"]; //Send in a object with name, and pair as a payload\n\n      let response = await api.createTop5List({\n        name: name,\n        items: pair\n      });\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.getTop5ListPairs();\n\n        if (response.data.success) {\n          let pairs = response.data.idNamePairs;\n          storeReducer({\n            type: GlobalStoreActionType.CREATE_NEW_LIST,\n            payload: {\n              currList: top5List,\n              pairs: pairs\n            }\n          });\n        }\n      }\n    }\n\n    asyncCreateNewList();\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  }; //This function updates the list marked for deletion, so that the name of it\n  //can be shown in the delete modal before possibly being deleted\n\n\n  store.setDeleteList = function (id) {\n    async function asyncSetDeleteList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List; //If the right list is able to be retrieved from the db, then call storeReducer w \n        //the list as the payload\n\n        storeReducer({\n          type: GlobalStoreActionType.SET_DELETE_LIST,\n          payload: top5List\n        });\n      }\n    }\n\n    asyncSetDeleteList(id);\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.showDeleteModal = function () {\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.deleteMarkedList = function () {\n    async function asyncDeleteMarkedList() {\n      //If the marked delete list is equal to the current list, make sure to close \n      //the UI after deleting this list\n      let isEqual = false;\n\n      if (store.listMarkedForDeletion && store.currentList) {\n        isEqual = store.listMarkedForDeletion._id === store.currentList._id;\n      }\n\n      let response = await api.deleteTop5ListById(store.listMarkedForDeletion._id).then(async function () {\n        //Make sure the delete  modal is dismissed\n        store.hideDeleteListModal();\n        let response2 = await api.getTop5ListPairs().then(response2 => function () {\n          let newPairs = response2.data.idNamePairs;\n          storeReducer({\n            type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n            payload: {\n              pairs: newPairs,\n              isCurrent: isEqual\n            }\n          });\n        });\n      });\n    }\n\n    asyncDeleteMarkedList();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  store.setItemActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_ITEM_ACTIVE,\n      payload: store.currentList\n    });\n  };\n\n  store.addChangeItemTransaction = function (id, newName) {\n    let oldText = store.currentList.items[id - 1];\n    let transaction = new ChangeItemTransaction(store, id, oldText, newName);\n    tps.addTransaction(transaction);\n  };\n\n  store.changeItemName = async function (id, newName) {\n    store.currentList.items[id - 1] = newName;\n    const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n    if (response.data.success) {\n      storeReducer({\n        type: GlobalStoreActionType.SET_CURRENT_LIST,\n        payload: store.currentList\n      });\n    }\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"eBzdqqm0MoxgRI0xq/+18zJuMIU=\");","map":{"version":3,"sources":["/Users/apaul23/316/Top5Lists_HW3/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","ChangeItemTransaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","SET_DELETE_LIST","CREATE_NEW_LIST","SET_ITEM_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","listCreated","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","isCurrent","pairs","currList","createNewList","asyncCreateNewList","name","pair","response","createTop5List","items","data","success","getTop5ListPairs","setCurrentList","id","asyncSetCurrentList","getTop5ListById","updateTop5ListById","_id","history","push","changeListName","newName","asyncChangeListName","updateList","getListPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setDeleteList","asyncSetDeleteList","hideDeleteListModal","modal","document","getElementById","classList","remove","showDeleteModal","add","deleteMarkedList","asyncDeleteMarkedList","isEqual","deleteTop5ListById","then","response2","newPairs","addMoveItemTransaction","start","end","transaction","addTransaction","moveItem","temp","i","updateCurrentList","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","setItemActive","addChangeItemTransaction","oldText","changeItemName"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,oBAAP,MAAiC,sCAAjC;AACA,OAAOC,qBAAP,MAAkC,uCAAlC;AACA,OAAO,MAAMC,kBAAkB,gBAAGN,aAAa,CAAC,EAAD,CAAxC;AACP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,OAAO,MAAMO,qBAAqB,GAAG;AACjCC,EAAAA,gBAAgB,EAAE,kBADe;AAEjCC,EAAAA,kBAAkB,EAAE,oBAFa;AAGjCC,EAAAA,kBAAkB,EAAE,oBAHa;AAIjCC,EAAAA,gBAAgB,EAAE,kBAJe;AAKjCC,EAAAA,yBAAyB,EAAE,2BALM;AAMjCC,EAAAA,eAAe,EAAE,iBANgB;AAOjCC,EAAAA,eAAe,EAAE,iBAPgB;AAQjCC,EAAAA,eAAe,EAAE;AARgB,CAA9B,C,CAWP;;AACA,MAAMC,GAAG,GAAG,IAAId,KAAJ,EAAZ,C,CAEA;AACA;;AACA,OAAO,MAAMe,cAAc,GAAG,MAAM;AAAA;;AAChC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC;AAC/BmB,IAAAA,WAAW,EAAE,EADkB;AAE/BC,IAAAA,WAAW,EAAE,IAFkB;AAG/BC,IAAAA,cAAc,EAAE,CAHe;AAI/BC,IAAAA,cAAc,EAAE,KAJe;AAK/BC,IAAAA,UAAU,EAAE,KALmB;AAM/BC,IAAAA,qBAAqB,EAAE,IANQ;AAO/BC,IAAAA,WAAW,EAAE;AAPkB,GAAD,CAAlC,CAFgC,CAYhC;AACA;;AACA,QAAMC,YAAY,GAAIC,MAAD,IAAY;AAC7B,QAAI;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoBF,MAAxB;;AACA,YAAQC,IAAR;AACI;AACA,WAAKtB,qBAAqB,CAACC,gBAA3B;AAA6C;AACzC,iBAAOW,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEU,OAAO,CAACV,WADT;AAEZC,YAAAA,WAAW,EAAES,OAAO,CAACC,QAFT;AAGZT,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZU,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZR,YAAAA,qBAAqB,EAAE,IANX;AAOZC,YAAAA,WAAW,EAAE;AAPD,WAAD,CAAf;AASH;AACD;;AACA,WAAKnB,qBAAqB,CAACE,kBAA3B;AAA+C;AAC3C,iBAAOU,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAE,IAFD;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZU,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZR,YAAAA,qBAAqB,EAAE,IANX;AAOZC,YAAAA,WAAW,EAAE;AAPD,WAAD,CAAf;AASH;AACD;;AACA,WAAKnB,qBAAqB,CAACG,kBAA3B;AAA+C;AAC3C;AACA;AACA,cAAIwB,SAAS,GAAG,IAAhB;;AACA,cAAI,OAAOJ,OAAO,CAACI,SAAf,KAA6B,WAAjC,EAA6C;AACzCA,YAAAA,SAAS,GAAGhB,KAAK,CAACG,WAAlB,CADyC,CAEzC;AACA;;AACAS,YAAAA,OAAO,GAAGA,OAAO,CAACK,KAAlB;AACH;;AACD,iBAAOhB,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEU,OADD;AAEZT,YAAAA,WAAW,EAAEa,SAFD;AAGZZ,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZU,YAAAA,oBAAoB,EAAEd,KAAK,CAACc,oBAJhB;AAKZC,YAAAA,gBAAgB,EAAEf,KAAK,CAACe,gBALZ;AAMZR,YAAAA,qBAAqB,EAAEP,KAAK,CAACO,qBANjB;AAOZC,YAAAA,WAAW,EAAE;AAPD,WAAD,CAAf;AASH;AACD;;AACA,WAAKnB,qBAAqB,CAACI,gBAA3B;AAA6C;AACzC,iBAAOQ,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAES,OAFD;AAGZR,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZU,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZR,YAAAA,qBAAqB,EAAE,IANX;AAOZC,YAAAA,WAAW,EAAE;AAPD,WAAD,CAAf;AASH;AACD;;AACA,WAAKnB,qBAAqB,CAACK,yBAA3B;AAAsD;AAClD,iBAAOO,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAES,OAFD;AAGZR,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZU,YAAAA,oBAAoB,EAAE,IAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZR,YAAAA,qBAAqB,EAAE,IANX;AAOZC,YAAAA,WAAW,EAAE;AAPD,WAAD,CAAf;AASH;AACD;;AACA,WAAKnB,qBAAqB,CAACQ,eAA3B;AAA4C;AACxC,iBAAOI,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAEH,KAAK,CAACG,WAFP;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZU,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,IALN;AAMZR,YAAAA,qBAAqB,EAAE,IANX;AAOZC,YAAAA,WAAW,EAAE;AAPD,WAAD,CAAf;AASH;;AACD,WAAKnB,qBAAqB,CAACM,eAA3B;AAA4C;AACxC,iBAAOM,QAAQ,CAAC;AACZC,YAAAA,WAAW,EAAEF,KAAK,CAACE,WADP;AAEZC,YAAAA,WAAW,EAAEH,KAAK,CAACG,WAFP;AAGZC,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAHV;AAIZG,YAAAA,qBAAqB,EAAEK,OAJX;AAKZG,YAAAA,gBAAgB,EAAEf,KAAK,CAACe,gBALZ;AAMZD,YAAAA,oBAAoB,EAAEd,KAAK,CAACc,oBANhB;AAOZN,YAAAA,WAAW,EAAE;AAPD,WAAD,CAAf;AASH;AACD;AACA;AACA;;AACA,WAAKnB,qBAAqB,CAACO,eAA3B;AAA4C;AACxC,iBAAOK,QAAQ,CAAC;AACZE,YAAAA,WAAW,EAAES,OAAO,CAACM,QADT;AAEZd,YAAAA,cAAc,EAAEJ,KAAK,CAACI,cAAN,GAAqB,CAFzB;AAGZF,YAAAA,WAAW,EAAEU,OAAO,CAACK,KAHT;AAIZH,YAAAA,oBAAoB,EAAE,KAJV;AAKZC,YAAAA,gBAAgB,EAAE,KALN;AAMZR,YAAAA,qBAAqB,EAAE,IANX;AAOZC,YAAAA,WAAW,EAAE;AAPD,WAAD,CAAf;AASH;AACD;;AACA;AACI,eAAOR,KAAP;AA7GR;AA+GH,GAjHD;;AAkHAA,EAAAA,KAAK,CAACmB,aAAN,GAAsB,YAAW;AAC7B,mBAAeC,kBAAf,GAAoC;AAChC;AACA,UAAIC,IAAI,GAAG,cAAcrB,KAAK,CAACI,cAA/B;AACA,UAAIkB,IAAI,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,CAAX,CAHgC,CAIhC;;AACA,UAAIC,QAAQ,GAAG,MAAMtC,GAAG,CAACuC,cAAJ,CAAmB;AAACH,QAAAA,IAAI,EAAEA,IAAP;AAAaI,QAAAA,KAAK,EAAEH;AAApB,OAAnB,CAArB;;AACA,UAAIC,QAAQ,CAACG,IAAT,CAAcC,OAAlB,EAA0B;AAClB,YAAId,QAAQ,GAAGU,QAAQ,CAACG,IAAT,CAAcb,QAA7B;AACAU,QAAAA,QAAQ,GAAG,MAAMtC,GAAG,CAAC2C,gBAAJ,EAAjB;;AACI,YAAIL,QAAQ,CAACG,IAAT,CAAcC,OAAlB,EAA0B;AACtB,cAAIV,KAAK,GAAGM,QAAQ,CAACG,IAAT,CAAcxB,WAA1B;AACAO,UAAAA,YAAY,CAAC;AACTE,YAAAA,IAAI,EAAEtB,qBAAqB,CAACO,eADnB;AAETgB,YAAAA,OAAO,EAAE;AAACM,cAAAA,QAAQ,EAAGL,QAAZ;AAAsBI,cAAAA,KAAK,EAAEA;AAA7B;AAFA,WAAD,CAAZ;AAIH;AACZ;AACJ;;AACDG,IAAAA,kBAAkB;AACrB,GApBD,CAhIgC,CAqJhC;AACA;AACA;;;AACApB,EAAAA,KAAK,CAAC6B,cAAN,GAAuB,UAAUC,EAAV,EAAc;AACjC,mBAAeC,mBAAf,CAAmCD,EAAnC,EAAuC;AACnC,UAAIP,QAAQ,GAAG,MAAMtC,GAAG,CAAC+C,eAAJ,CAAoBF,EAApB,CAArB;;AACA,UAAIP,QAAQ,CAACG,IAAT,CAAcC,OAAlB,EAA2B;AACvB,YAAId,QAAQ,GAAGU,QAAQ,CAACG,IAAT,CAAcb,QAA7B;AACAU,QAAAA,QAAQ,GAAG,MAAMtC,GAAG,CAACgD,kBAAJ,CAAuBpB,QAAQ,CAACqB,GAAhC,EAAqCrB,QAArC,CAAjB;;AACA,YAAIU,QAAQ,CAACG,IAAT,CAAcC,OAAlB,EAA2B;AACvBlB,UAAAA,YAAY,CAAC;AACTE,YAAAA,IAAI,EAAEtB,qBAAqB,CAACI,gBADnB;AAETmB,YAAAA,OAAO,EAAEC;AAFA,WAAD,CAAZ;AAIAb,UAAAA,KAAK,CAACmC,OAAN,CAAcC,IAAd,CAAmB,eAAevB,QAAQ,CAACqB,GAA3C;AACH;AACJ;AACJ;;AACDH,IAAAA,mBAAmB,CAACD,EAAD,CAAnB;AACH,GAhBD,CAxJgC,CAyKhC;;;AACA9B,EAAAA,KAAK,CAACqC,cAAN,GAAuB,UAAUP,EAAV,EAAcQ,OAAd,EAAuB;AAC1C;AACA,mBAAeC,mBAAf,CAAmCT,EAAnC,EAAuC;AACnC,UAAIP,QAAQ,GAAG,MAAMtC,GAAG,CAAC+C,eAAJ,CAAoBF,EAApB,CAArB;;AACA,UAAIP,QAAQ,CAACG,IAAT,CAAcC,OAAlB,EAA2B;AACvB,YAAId,QAAQ,GAAGU,QAAQ,CAACG,IAAT,CAAcb,QAA7B;AACAA,QAAAA,QAAQ,CAACQ,IAAT,GAAgBiB,OAAhB;;AACA,uBAAeE,UAAf,CAA0B3B,QAA1B,EAAoC;AAChCU,UAAAA,QAAQ,GAAG,MAAMtC,GAAG,CAACgD,kBAAJ,CAAuBpB,QAAQ,CAACqB,GAAhC,EAAqCrB,QAArC,CAAjB;;AACA,cAAIU,QAAQ,CAACG,IAAT,CAAcC,OAAlB,EAA2B;AACvB,2BAAec,YAAf,CAA4B5B,QAA5B,EAAsC;AAClCU,cAAAA,QAAQ,GAAG,MAAMtC,GAAG,CAAC2C,gBAAJ,EAAjB;;AACA,kBAAIL,QAAQ,CAACG,IAAT,CAAcC,OAAlB,EAA2B;AACvB,oBAAIe,UAAU,GAAGnB,QAAQ,CAACG,IAAT,CAAcxB,WAA/B;AACAO,gBAAAA,YAAY,CAAC;AACTE,kBAAAA,IAAI,EAAEtB,qBAAqB,CAACC,gBADnB;AAETsB,kBAAAA,OAAO,EAAE;AACLV,oBAAAA,WAAW,EAAEwC,UADR;AAEL7B,oBAAAA,QAAQ,EAAEA;AAFL;AAFA,iBAAD,CAAZ;AAOH;AACJ;;AACD4B,YAAAA,YAAY,CAAC5B,QAAD,CAAZ;AACH;AACJ;;AACD2B,QAAAA,UAAU,CAAC3B,QAAD,CAAV;AACH;AACJ;;AACD0B,IAAAA,mBAAmB,CAACT,EAAD,CAAnB;AACH,GA9BD,CA1KgC,CAyMhC;;;AACA9B,EAAAA,KAAK,CAAC2C,gBAAN,GAAyB,YAAY;AACjClC,IAAAA,YAAY,CAAC;AACTE,MAAAA,IAAI,EAAEtB,qBAAqB,CAACE,kBADnB;AAETqB,MAAAA,OAAO,EAAE;AAFA,KAAD,CAAZ;AAIH,GALD,CA1MgC,CAiNhC;;;AACAZ,EAAAA,KAAK,CAAC4C,eAAN,GAAwB,YAAY;AAChC,mBAAeC,oBAAf,GAAsC;AAClC,YAAMtB,QAAQ,GAAG,MAAMtC,GAAG,CAAC2C,gBAAJ,EAAvB;;AACA,UAAIL,QAAQ,CAACG,IAAT,CAAcC,OAAlB,EAA2B;AACvB,YAAIe,UAAU,GAAGnB,QAAQ,CAACG,IAAT,CAAcxB,WAA/B;AACAO,QAAAA,YAAY,CAAC;AACTE,UAAAA,IAAI,EAAEtB,qBAAqB,CAACG,kBADnB;AAEToB,UAAAA,OAAO,EAAE8B;AAFA,SAAD,CAAZ;AAIH,OAND,MAOK;AACDI,QAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACH;AACJ;;AACDF,IAAAA,oBAAoB;AACvB,GAfD,CAlNgC,CAkOhC;AACA;;;AACA7C,EAAAA,KAAK,CAACgD,aAAN,GAAsB,UAAUlB,EAAV,EAAc;AAChC,mBAAemB,kBAAf,CAAkCnB,EAAlC,EAAsC;AAClC,UAAIP,QAAQ,GAAG,MAAMtC,GAAG,CAAC+C,eAAJ,CAAoBF,EAApB,CAArB;;AACA,UAAIP,QAAQ,CAACG,IAAT,CAAcC,OAAlB,EAA2B;AACvB,YAAId,QAAQ,GAAGU,QAAQ,CAACG,IAAT,CAAcb,QAA7B,CADuB,CAEvB;AACA;;AACAJ,QAAAA,YAAY,CAAC;AACTE,UAAAA,IAAI,EAAEtB,qBAAqB,CAACM,eADnB;AAETiB,UAAAA,OAAO,EAAEC;AAFA,SAAD,CAAZ;AAIH;AACJ;;AACDoC,IAAAA,kBAAkB,CAACnB,EAAD,CAAlB;AACH,GAdD;;AAeA9B,EAAAA,KAAK,CAACkD,mBAAN,GAA4B,YAAY;AACpC,QAAIC,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAZ;AACAF,IAAAA,KAAK,CAACG,SAAN,CAAgBC,MAAhB,CAAuB,YAAvB;AACH,GAHD;;AAIAvD,EAAAA,KAAK,CAACwD,eAAN,GAAwB,YAAU;AAC9B,QAAIL,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAZ;AACAF,IAAAA,KAAK,CAACG,SAAN,CAAgBG,GAAhB,CAAoB,YAApB;AACH,GAHD;;AAIAzD,EAAAA,KAAK,CAAC0D,gBAAN,GAAyB,YAAW;AAChC,mBAAeC,qBAAf,GAAsC;AAClC;AACA;AACA,UAAIC,OAAO,GAAG,KAAd;;AACA,UAAI5D,KAAK,CAACO,qBAAN,IAA+BP,KAAK,CAACG,WAAzC,EAAqD;AACjDyD,QAAAA,OAAO,GAAG5D,KAAK,CAACO,qBAAN,CAA4B2B,GAA5B,KAAoClC,KAAK,CAACG,WAAN,CAAkB+B,GAAhE;AACH;;AACD,UAAIX,QAAQ,GAAG,MAAMtC,GAAG,CAAC4E,kBAAJ,CAAuB7D,KAAK,CAACO,qBAAN,CAA4B2B,GAAnD,EAAwD4B,IAAxD,CAA6D,kBAAgB;AAC1F;AACA9D,QAAAA,KAAK,CAACkD,mBAAN;AACA,YAAIa,SAAS,GAAG,MAAM9E,GAAG,CAAC2C,gBAAJ,GAAuBkC,IAAvB,CAA4BC,SAAS,IAAI,YAAU;AACjE,cAAIC,QAAQ,GAAGD,SAAS,CAACrC,IAAV,CAAexB,WAA9B;AACAO,UAAAA,YAAY,CAAC;AACTE,YAAAA,IAAI,EAAEtB,qBAAqB,CAACG,kBADnB;AAEToB,YAAAA,OAAO,EAAE;AAACK,cAAAA,KAAK,EAAE+C,QAAR;AAAkBhD,cAAAA,SAAS,EAAE4C;AAA7B;AAFA,WAAD,CAAZ;AAIH,SANiB,CAAtB;AAOC,OAVY,CAArB;AAWK;;AACTD,IAAAA,qBAAqB;AACxB,GArBD,CA3PgC,CAiRhC;AACA;AACA;AACA;;;AACA3D,EAAAA,KAAK,CAACiE,sBAAN,GAA+B,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AACjD,QAAIC,WAAW,GAAG,IAAIlF,oBAAJ,CAAyBc,KAAzB,EAAgCkE,KAAhC,EAAuCC,GAAvC,CAAlB;AACArE,IAAAA,GAAG,CAACuE,cAAJ,CAAmBD,WAAnB;AACH,GAHD;;AAIApE,EAAAA,KAAK,CAACsE,QAAN,GAAiB,UAAUJ,KAAV,EAAiBC,GAAjB,EAAsB;AACnCD,IAAAA,KAAK,IAAI,CAAT;AACAC,IAAAA,GAAG,IAAI,CAAP;;AACA,QAAID,KAAK,GAAGC,GAAZ,EAAiB;AACb,UAAII,IAAI,GAAGvE,KAAK,CAACG,WAAN,CAAkBsB,KAAlB,CAAwByC,KAAxB,CAAX;;AACA,WAAK,IAAIM,CAAC,GAAGN,KAAb,EAAoBM,CAAC,GAAGL,GAAxB,EAA6BK,CAAC,EAA9B,EAAkC;AAC9BxE,QAAAA,KAAK,CAACG,WAAN,CAAkBsB,KAAlB,CAAwB+C,CAAxB,IAA6BxE,KAAK,CAACG,WAAN,CAAkBsB,KAAlB,CAAwB+C,CAAC,GAAG,CAA5B,CAA7B;AACH;;AACDxE,MAAAA,KAAK,CAACG,WAAN,CAAkBsB,KAAlB,CAAwB0C,GAAxB,IAA+BI,IAA/B;AACH,KAND,MAOK,IAAIL,KAAK,GAAGC,GAAZ,EAAiB;AAClB,UAAII,IAAI,GAAGvE,KAAK,CAACG,WAAN,CAAkBsB,KAAlB,CAAwByC,KAAxB,CAAX;;AACA,WAAK,IAAIM,CAAC,GAAGN,KAAb,EAAoBM,CAAC,GAAGL,GAAxB,EAA6BK,CAAC,EAA9B,EAAkC;AAC9BxE,QAAAA,KAAK,CAACG,WAAN,CAAkBsB,KAAlB,CAAwB+C,CAAxB,IAA6BxE,KAAK,CAACG,WAAN,CAAkBsB,KAAlB,CAAwB+C,CAAC,GAAG,CAA5B,CAA7B;AACH;;AACDxE,MAAAA,KAAK,CAACG,WAAN,CAAkBsB,KAAlB,CAAwB0C,GAAxB,IAA+BI,IAA/B;AACH,KAhBkC,CAkBnC;;;AACAvE,IAAAA,KAAK,CAACyE,iBAAN;AACH,GApBD;;AAqBAzE,EAAAA,KAAK,CAACyE,iBAAN,GAA0B,YAAW;AACjC,mBAAeC,sBAAf,GAAwC;AACpC,YAAMnD,QAAQ,GAAG,MAAMtC,GAAG,CAACgD,kBAAJ,CAAuBjC,KAAK,CAACG,WAAN,CAAkB+B,GAAzC,EAA8ClC,KAAK,CAACG,WAApD,CAAvB;;AACA,UAAIoB,QAAQ,CAACG,IAAT,CAAcC,OAAlB,EAA2B;AACvBlB,QAAAA,YAAY,CAAC;AACTE,UAAAA,IAAI,EAAEtB,qBAAqB,CAACI,gBADnB;AAETmB,UAAAA,OAAO,EAAEZ,KAAK,CAACG;AAFN,SAAD,CAAZ;AAIH;AACJ;;AACDuE,IAAAA,sBAAsB;AACzB,GAXD;;AAYA1E,EAAAA,KAAK,CAAC2E,IAAN,GAAa,YAAY;AACrB7E,IAAAA,GAAG,CAAC8E,eAAJ;AACH,GAFD;;AAGA5E,EAAAA,KAAK,CAAC6E,IAAN,GAAa,YAAY;AACrB/E,IAAAA,GAAG,CAACgF,aAAJ;AACH,GAFD,CA7TgC,CAiUhC;;;AACA9E,EAAAA,KAAK,CAAC+E,uBAAN,GAAgC,YAAY;AACxCtE,IAAAA,YAAY,CAAC;AACTE,MAAAA,IAAI,EAAEtB,qBAAqB,CAACK,yBADnB;AAETkB,MAAAA,OAAO,EAAE;AAFA,KAAD,CAAZ;AAIH,GALD;;AAMAZ,EAAAA,KAAK,CAACgF,aAAN,GAAsB,YAAW;AAC7BvE,IAAAA,YAAY,CAAC;AACTE,MAAAA,IAAI,EAAEtB,qBAAqB,CAACQ,eADnB;AAETe,MAAAA,OAAO,EAAEZ,KAAK,CAACG;AAFN,KAAD,CAAZ;AAIH,GALD;;AAMAH,EAAAA,KAAK,CAACiF,wBAAN,GAAiC,UAASnD,EAAT,EAAaQ,OAAb,EAAqB;AAClD,QAAI4C,OAAO,GAAGlF,KAAK,CAACG,WAAN,CAAkBsB,KAAlB,CAAwBK,EAAE,GAAC,CAA3B,CAAd;AACA,QAAIsC,WAAW,GAAG,IAAIjF,qBAAJ,CAA0Ba,KAA1B,EAAiC8B,EAAjC,EAAqCoD,OAArC,EAA8C5C,OAA9C,CAAlB;AACAxC,IAAAA,GAAG,CAACuE,cAAJ,CAAmBD,WAAnB;AACH,GAJD;;AAKApE,EAAAA,KAAK,CAACmF,cAAN,GAAuB,gBAAerD,EAAf,EAAmBQ,OAAnB,EAA4B;AAC/CtC,IAAAA,KAAK,CAACG,WAAN,CAAkBsB,KAAlB,CAAwBK,EAAE,GAAC,CAA3B,IAAgCQ,OAAhC;AACA,UAAMf,QAAQ,GAAG,MAAMtC,GAAG,CAACgD,kBAAJ,CAAuBjC,KAAK,CAACG,WAAN,CAAkB+B,GAAzC,EAA8ClC,KAAK,CAACG,WAApD,CAAvB;;AACA,QAAIoB,QAAQ,CAACG,IAAT,CAAcC,OAAlB,EAA0B;AACtBlB,MAAAA,YAAY,CAAC;AACTE,QAAAA,IAAI,EAAEtB,qBAAqB,CAACI,gBADnB;AAETmB,QAAAA,OAAO,EAAEZ,KAAK,CAACG;AAFN,OAAD,CAAZ;AAIH;AACJ,GATD,CAnVgC,CA6VhC;;;AACA,SAAO;AAAEH,IAAAA,KAAF;AAASS,IAAAA;AAAT,GAAP;AACH,CA/VM;;GAAMV,c","sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nimport ChangeItemTransaction from '../transactions/ChangeItemTransaction'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    SET_DELETE_LIST: \"SET_DELETE_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    SET_ITEM_ACTIVE: \"SET_ITEM_ACTIVE\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null,\n        listCreated: false\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        let { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    listCreated: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    listCreated: false\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                //For deleting a list: if the deleted list wasn't also the \n                //current list, then make sure to not set currentList to null \n                let isCurrent = null;\n                if (typeof payload.isCurrent !== 'undefined'){\n                    isCurrent = store.currentList;\n                    //If .isCurrent exists, that means deleteMarkedList \n                    //called this type. So payload has to be set to .pairs to setStore\n                    payload = payload.pairs;\n                }\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: isCurrent,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: store.isListNameEditActive,\n                    isItemEditActive: store.isItemEditActive,\n                    listMarkedForDeletion: store.listMarkedForDeletion,\n                    listCreated: false\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    listCreated: false\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    listCreated: false\n                });\n            }\n            //If a user clicked on a item, set itemEditActive to true\n            case GlobalStoreActionType.SET_ITEM_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: true,\n                    listMarkedForDeletion: null,\n                    listCreated: false\n                });\n            }\n            case GlobalStoreActionType.SET_DELETE_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listMarkedForDeletion: payload,\n                    isItemEditActive: store.isItemEditActive,\n                    isListNameEditActive: store.isListNameEditActive,\n                    listCreated: false\n                });\n            }\n            //If a new list is created, make sure to update the new list counter\n            //to reflect this, along with the keyname pairs, currentList references, and \n            //listCreated boolean (so that this new list can be in edit mode right away)\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    currentList: payload.currList,\n                    newListCounter: store.newListCounter+1,\n                    idNamePairs: payload.pairs,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null,\n                    listCreated: true\n                });\n            }\n            //Update the name of the current delete modal, so tht it shows in the modal\n            default:\n                return store;\n        }\n    }\n    store.createNewList = function() {\n        async function asyncCreateNewList() {\n            //Create and add a new list to the database with payload being the current list counter\n            let name = \"Untitled \" + store.newListCounter;\n            let pair = [\"?\", \"?\", \"?\", \"?\", \"?\"];\n            //Send in a object with name, and pair as a payload\n            let response = await api.createTop5List({name: name, items: pair});\n            if (response.data.success){\n                    let top5List = response.data.top5List;\n                    response = await api.getTop5ListPairs();\n                        if (response.data.success){\n                            let pairs = response.data.idNamePairs;\n                            storeReducer({\n                                type: GlobalStoreActionType.CREATE_NEW_LIST,\n                                payload: {currList : top5List, pairs: pairs}\n                            });\n                        }\n            }\n        }\n        asyncCreateNewList();\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: top5List\n                    });\n                    store.history.push(\"/top5list/\" + top5List._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                top5List.name = newName;\n                async function updateList(top5List) {\n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                    if (response.data.success) {\n                        async function getListPairs(top5List) {\n                            response = await api.getTop5ListPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        top5List: top5List\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(top5List);\n                    }\n                }\n                updateList(top5List);\n            }\n        }\n        asyncChangeListName(id);\n    }\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getTop5ListPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n    //This function updates the list marked for deletion, so that the name of it\n    //can be shown in the delete modal before possibly being deleted\n    store.setDeleteList = function (id) {\n        async function asyncSetDeleteList(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                //If the right list is able to be retrieved from the db, then call storeReducer w \n                //the list as the payload\n                storeReducer({\n                    type: GlobalStoreActionType.SET_DELETE_LIST,\n                    payload: top5List\n                });\n            }\n        }\n        asyncSetDeleteList(id);\n    }\n    store.hideDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n    store.showDeleteModal = function(){\n        let modal = document.getElementById(\"delete-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n    store.deleteMarkedList = function() {\n        async function asyncDeleteMarkedList(){\n            //If the marked delete list is equal to the current list, make sure to close \n            //the UI after deleting this list\n            let isEqual = false;\n            if (store.listMarkedForDeletion && store.currentList){\n                isEqual = store.listMarkedForDeletion._id === store.currentList._id;\n            }\n            let response = await api.deleteTop5ListById(store.listMarkedForDeletion._id).then(async function(){\n                    //Make sure the delete  modal is dismissed\n                    store.hideDeleteListModal();\n                    let response2 = await api.getTop5ListPairs().then(response2 => function(){\n                            let newPairs = response2.data.idNamePairs;\n                            storeReducer({\n                                type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                                payload: {pairs: newPairs, isCurrent: isEqual}\n                            });\n                        });\n                    });\n                }\n        asyncDeleteMarkedList();\n    }\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    store.updateCurrentList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n    store.setItemActive = function() {\n        storeReducer({\n            type: GlobalStoreActionType.SET_ITEM_ACTIVE,\n            payload: store.currentList\n        })\n    }\n    store.addChangeItemTransaction = function(id, newName){\n        let oldText = store.currentList.items[id-1];\n        let transaction = new ChangeItemTransaction(store, id, oldText, newName);\n        tps.addTransaction(transaction);\n    }\n    store.changeItemName = async function(id, newName) {\n        store.currentList.items[id-1] = newName;\n        const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n        if (response.data.success){\n            storeReducer({\n                type: GlobalStoreActionType.SET_CURRENT_LIST,\n                payload: store.currentList\n            });\n        }\n    }\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"]},"metadata":{},"sourceType":"module"}